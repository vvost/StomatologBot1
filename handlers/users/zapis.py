import pymysql
import re
from aiogram import types
from loader import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
from data.config import DATABASES
from keyboards.inline.zapis_inline import get_services_keyboard, get_keyboards, get_time
from keyboards.inline.menu_inline import get_about_keyboard


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
conn = pymysql.connect(
    host=DATABASES['default']['HOST'],
    port=int(DATABASES['default']['PORT']),
    user=DATABASES['default']['USER'],
    password=DATABASES['default']['PASSWORD'],
    database=DATABASES['default']['NAME'],
    charset='utf8mb4'
)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
cursor = conn.cursor()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class FormStates(StatesGroup):
    FIRST_NAME = State()
    LAST_NAME = State()
    CONTACT_INFO = State()
    SERVICE = State()
    APPOINTMENT_DATE = State()
    APPOINTMENT_TIME = State()  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ APPOINTMENT_TIME


@dp.callback_query_handler(lambda c: c.data == 'appointment', state='*')
async def start_appointment(query: types.CallbackQuery, state: FSMContext):
    chat_id = query.message.chat.id

    await FormStates.FIRST_NAME.set()

    await query.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏–µ–º–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:")



@dp.message_handler(state=FormStates.FIRST_NAME)
async def start_appointment_process(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    first_name = message.text
    if not first_name.isalpha():

        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")

        return
    await state.update_data(first_name=first_name)

    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")

    await FormStates.LAST_NAME.set()


@dp.message_handler(state=FormStates.LAST_NAME)
async def process_last_name(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    last_name = message.text
    if not last_name.isalpha():

        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é —Ç–µ–∫—Å—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")

        return
    await state.update_data(last_name=last_name)


    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")

    await FormStates.CONTACT_INFO.set()


@dp.message_handler(state=FormStates.CONTACT_INFO)
async def process_contact_info(message: types.Message, state: FSMContext):
    contact_info = message.text
    chat_id = message.chat.id

    description = '‚ú≥Ô∏è–£ –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–ª–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞. \n' \
                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n' \
                  '*–ö–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ –ª–∏—Å—Ç–∞—Ç—å –≤–Ω–∏–∑'


    if not contact_info.isdigit():

        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

        return

    await state.update_data(contact_info=contact_info)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —É—Å–ª—É–≥—É:")

    await message.reply(description, reply_markup=get_keyboards())
    await FormStates.SERVICE.set()


@dp.message_handler(state=FormStates.SERVICE)
async def process_service(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    service = message.text
    await state.update_data(service=service)

    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:\n"
                            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ —á–µ—Ä—Ç–æ—á–∫—É\n"
                            "–ü—Ä–∏–º–µ—Ä - 2023-10-28")


    await FormStates.APPOINTMENT_DATE.set()


@dp.message_handler(state=FormStates.APPOINTMENT_DATE)
async def process_appointment_date(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    appointment_date = message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞

    try:
        appointment_date = datetime.strptime(appointment_date, '%Y-%m-%d').date()
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    await state.update_data(appointment_date=appointment_date)

    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ \n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n."
                            "*–ö–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=get_time())

    await FormStates.APPOINTMENT_TIME.set()  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ APPOINTMENT_TIME


@dp.message_handler(state=FormStates.APPOINTMENT_TIME)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ APPOINTMENT_TIME
async def process_appointment_time(message: types.Message, state: FSMContext):
    chat_id = message.chat.id

    appointment_time = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∞—Ç—É "–ß–ß:–ú–ú-–ß–ß:–ú–ú"
    if not re.match(r'\d{1,2}:\d{2}-\d{1,2}:\d{2}', appointment_time):

        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú-–ß–ß:–ú–ú'.")

        return

    start_time_str, end_time_str = appointment_time.split('-')
    start_time = datetime.strptime(start_time_str, '%H:%M').time()
    end_time = datetime.strptime(end_time_str, '%H:%M').time()

    await state.update_data(appointment_time=appointment_time, start_time=start_time, end_time=end_time)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    first_name = data["first_name"]
    last_name = data["last_name"]
    contact_info = data["contact_info"]
    service = data["service"]
    appointment_date = data["appointment_date"]
    start_time = data["start_time"]
    end_time = data["end_time"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã
    if is_time_available(start_time, end_time, appointment_date):
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MySQL
        add_application(first_name, last_name, contact_info, service, appointment_date, start_time, end_time)

        await bot.send_message(message.chat.id, f"<b>–í–∞—Å –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∞ –ø—Ä–∏–µ–º:</b>\n"
                                                    f"<b>–ò–º—è:</b> {first_name}\n"
                                                    f"<b>–§–∞–º–∏–ª–∏—è:</b> {last_name}\n"
                                                    f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {contact_info}\n"
                                                    f"<b>–£—Å–ª—É–≥–∞:</b> {service}\n"
                                                    f"<b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {appointment_date}\n"
                                                    f"<b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {start_time}-{end_time}", parse_mode='HTML',
                                   reply_markup=get_services_keyboard())


    else:

            await bot.send_message(message.chat.id,
                                   "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É.",
                                   reply_markup=get_services_keyboard())

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'back_services')
async def handle_back_services(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id

    image_url = 'https://cloud.mail.ru/public/qv6b/QGvDJA8ZQ'  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ

    description = 'üåº –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåº\n' \
                  '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —á–∞—Ç-–±–æ—Ç ! \n' \
                  'üë©‚Äç‚öïÔ∏è–ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–∫–∫–∞, –∏ —è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥\n' \
                  '–ß–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫–æ –º–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å—å. –í–º–µ—Å—Ç–µ –º—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –∫—Ä–∞—Å–æ—Ç—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é.\n' \
                  'üåü –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å! üåü'
    await dp.bot.send_photo(chat_id, caption=description, reply_markup=get_about_keyboard(), photo=image_url)
    await callback_query.message.delete()



def is_time_available(start_time, end_time, appointment_date):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    query = """
            SELECT COUNT(*) 
            FROM stomatolog_application 
            WHERE appointment_date = %s 
            AND (TIME(start_time) < %s AND TIME(end_time) > %s)
        """
    cursor.execute(query, (appointment_date, end_time, start_time))
    count = cursor.fetchone()[0]

    return count == 0


smth_chanel = "https://t.me/+knSA8Q9RJks1OTdi"

def add_application(first_name, last_name, contact_info, service, appointment_date, start_time, end_time):
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MySQL
    query = "INSERT INTO stomatolog_application (first_name, last_name, contact_info, service, appointment_date, start_time, end_time) " \
            "VALUES (%s, %s, %s, %s, %s, %s, %s)"
    values = (first_name, last_name, contact_info, service, appointment_date, start_time, end_time)
    cursor.execute(query, values)
    conn.commit()
